2004-06-25: Further enhancements to alref. .  Made packages work in
	    names of YTools logical pathnames.  Fixed bug in 'repeat'
	    for var notation (v e0 :then e1) so it's the same as (v =
	    e0 :then e1).  Got 'fload-recheck' working correctly.
	    Version 1.4
	
2004-06-24: Improved definition of 'alref.' so it allows specification
            of equality test, access method, and new-entry builder.
	    Allow package names to occur inside YTools logical pathnames.
	
2004-04-20: Added 'val-or-initialize' and its notational variant,
            'memoize-val', to misc.  Tightened definitions of 'alref' and
	    'alref.' .
	
2004-03-14: Added debug.lisp
	
2004-03-09: Changes for portability.
	
2003-12-17: (branch ytools-1-2-dev) Rejiggered logic to checking
	    whether to recompile in files.lisp.  Eventually this will be
	    right, by the monkeys-and-typewriters theorem.
	
2003-12-11: (branch ytools-1-2-dev) Rewrote file-update checker to get
            right the logic of when to recompile or reload a file.
	
2003-11-08: Slight change to an error message in pathname.lisp.
	
2003-10-28: Changed ytload.lisp to allow .lmd files to be in arbitrary places
	
2003-10-27: Eliminated Allegro check in depend.lisp"
	
2003-10-26: Added 'ytcopy.lisp' utility
	
2003-08-24: Declared var fload-compile* properly.
	    Better y-n query handling in one place
	    Still struggling with precise definition of 'depends-on'
	
2003-08-15: Slight reorganization of 'repeat.lisp' to split some local
	    functions off so they can be used elsewhere.
	
2003-08-14: Changed handling of datafuns on property lists, adding
            'datafun-on-plist'.
	    In mapper.lisp, had to explicitly declare that 'mapmac'
	    property is stored on symbol plists.  Ditto for 'match-code'
	    property in setter.lisp.
	    Slight bug fix in setter.lisp
	
2003-08-06: Fixed bug in pathname.lisp	    
	
2003-08-03: Added '--' to base.lisp
	
2003-07-13: Replaced :continue with :proceed in 'signal-problem'.  Made
            the string after :proceed evaluable.
