;-*- Mode: Common-lisp; Package: ytools; -*-
(in-package :ytools)

;;; Copyright (C) 1976-2003 
;;;     Drew McDermott and Yale University.  All rights reserved
;;; This software is released under the terms of the Modified BSD
;;; License.  See file COPYING for details.

(declare-config-var ytools-home-dir*)
(declare-config-var lisp-source-extn*)
(declare-config-var lisp-object-extn*)
(declare-config-var filename-case*)
(declare-config-var lisp-preferred-case*)
;;; A string like "../bin/" or "../binansi/" that says where Lisp bin files are
;;; standardly found relative to source files.
(declare-config-var standard-bin-path*)
;;; An extra directory layer (e.g., "ansi/") that goes after the standard bin path
(declare-config-var bin-idio*)


(defparameter lisp-readtable* *readtable*)
(defparameter ytools-readtable* (copy-readtable nil))
(defparameter default-standard-bin-path* "../bin/")

(defun install-ytfm (sto)
   (format t "I will install YTFM.  I will ask you some pertinent~%")
   (format t " questions.  After I am done, please quit Lisp and restart~%")
   (set-config-var ytools-home-dir* sto
	        (prompt-for-dir-name  "Type the directory YTools resides in: "))
   (set-config-var lisp-source-extn* sto
	  (format t "What extension do Lisp source files have in your system (e.g., lisp or lsp)? ")
	  (let ((extn (read-line-trim)))
	     (cond ((= (length extn) 0)
		    (format t "Assuming extension 'lisp'~%")
		    "lisp")
		   (t extn))))
   (set-config-var  lisp-object-extn* sto
      (format t "What extension do Lisp object files have (e.g., fasl, o)? ")
      (let ((extn (read-line-trim)))
	  (cond ((= (length lisp-object-extn*) 0)
		 (format t "Assuming extension 'fasl'~%")
		 "fasl")
		(t extn))))
   (set-config-var lisp-preferred-case* sto
	  (format t "Are Lisp symbols read as uppercase? ")
	  (cond ((member (read-line-trim) '("y" "yes" "t") :test #'equal)
		 ':upper)
		(t ':lower)))
   (set-config-var standard-bin-path* sto
	  (format t "Where should binary files be located relative to source files~% (e.g., \"bin/\" or \"../bin/\" (default)? ")
	  (let ((path (read-line-trim)))
	        (cond ((string= path "")
		       default-standard-bin-path*)
		      (t (dirname-with-delimiter path)))))
   (set-config-var bin-idio* sto
	  (format t "For some implementations or compilers, you may want to provide~%~
an extra directory layer (e.g., \"cmucl/\" or \"modern/\") to appear between~%~
the standard bin path and its subdirectories.~%~
If so, type it here (blank line for no extra layer): ")
	  (let ((bi (read-line-trim)))
	     (cond ((and (not (string= bi ""))
			 (not (string-ends-with bi directory-delimiter*)))
		    (strings-concat bi directory-delimiter*))
		   (t bi))))
   (install-ytools-after-queries))

(defun install-ytools-after-queries ()
   (load-yt-config-file)
   (load (strings-concat ytools-home-dir* "ytools.lsy"))
   (let ((*readtable* (intern-eval :ytools ytools-readtable* :ytools)))
      (with-compilation-unit ()
	 (intern-call ytools compile-core)))
   t)

(defun load-ytfm ()
   (load-yt-config-file)
   (load (strings-concat ytools-home-dir* "ytools.lsy"))
   (let ((*readtable* (intern-eval :ytools ytools-readtable* :ytools)))
;;;;      (format t "Before loading core, config-directory* = ~s~%"
;;;;	      config-directory*)
      (with-compilation-unit ()
	 (intern-call ytools load-core))
      (list (find-package :ytools) *readtable*)))